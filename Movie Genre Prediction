import numpy as np  # Imports the NumPy library for numerical computing, aliasing it as np.
import pandas as pd  # Imports the Pandas library for data manipulation, aliasing it as pd.
import matplotlib.pyplot as plt  # Imports the Matplotlib library for plotting, aliasing it as plt.
import seaborn as sns  # Imports the Seaborn library for data visualization, aliasing it as sns.
import re  # Imports the re module for regular expressions.
import nltk  # Imports the NLTK (Natural Language Toolkit) library for natural language processing.
import string  # Imports the string module for string manipulation.
from nltk.corpus import stopwords  # Imports the stopwords corpus from NLTK.
from nltk.stem import LancasterStemmer  # Imports the LancasterStemmer class from NLTK.
from sklearn.preprocessing import OneHotEncoder  # Imports the OneHotEncoder class from scikit-learn for one-hot encoding.
from sklearn.model_selection import train_test_split  # Imports the train_test_split function for splitting data.
from sklearn.naive_bayes import MultinomialNB  # Imports the MultinomialNB class from scikit-learn for Naive Bayes classification.
from sklearn.metrics import accuracy_score, classification_report  # Imports functions for model evaluation.
from sklearn.feature_extraction.text import TfidfVectorizer  # Imports the TfidfVectorizer class from scikit-learn for text vectorization.

# Load the training data
train_path = "/kaggle/input/genre-classification-dataset-imdb/Genre Classification Dataset/train_data.txt"
train_data = pd.read_csv(train_path, sep=':::', names=['Title', 'Genre', 'Description'], engine='python')

print(train_data.describe())

print(train_data.info())

print(train_data.isnull().sum())

# Load the test data
test_path = "/kaggle/input/genre-classification-dataset-imdb/Genre Classification Dataset/test_data.txt"
test_data = pd.read_csv(test_path, sep=':::', names=['Id', 'Title', 'Description'], engine='python')
test_data.head()

#Count each genre value
train_data.Genre.value_counts()

# Plot count plot
plt.figure(figsize=(12,8))  # Sets the size of the figure for the count plot.
counts = train_data.Genre.value_counts()  # Computes the count of each genre in the training data.
sns.barplot(x=counts.index, y=counts, color='blue')  # Creates a bar plot showing the distribution of genres.
plt.xlabel('Genre' ,fontsize=14, fontweight='bold')  # Sets the label for the x-axis.
plt.ylabel('Count', fontsize=14, fontweight='bold')  # Sets the label for the y-axis.
plt.title('Distribution of Genres', fontsize=16, fontweight='bold')  # Sets the title of the plot.
plt.xticks(rotation=90, fontsize=14, fontweight='bold');  # Sets the rotation and font size of the x-axis labels.

# Plot the distribution of genres in the training data
plt.figure(figsize=(14, 7))  # Sets the size of the figure for the count plot.
sns.countplot(data=train_data, y='Genre', order=train_data['Genre'].value_counts().index, palette='viridis')  # Creates a count plot showing the distribution of genres.
plt.xlabel('Count', fontsize=14, fontweight='bold')  # Sets the label for the x-axis.
plt.ylabel('Genre', fontsize=14, fontweight='bold')  # Sets the label for the y-axis.

# Plot the distribution of genres using a bar plot
plt.figure(figsize=(14, 7))  # Sets the size of the figure for the bar plot.
counts = train_data['Genre'].value_counts()  # Computes the count of each genre in the training data.
sns.barplot(x=counts.index, y=counts, palette='viridis')  # Creates a bar plot showing the distribution of genres.
plt.xlabel('Genre', fontsize=14, fontweight='bold')  # Sets the label for the x-axis.
plt.ylabel('Count', fontsize=14, fontweight='bold')  # Sets the label for the y-axis.
plt.title('Distribution of Genres', fontsize=16, fontweight='bold')  # Sets the title of the plot.
plt.xticks(rotation=90, fontsize=14, fontweight='bold')  # Sets the rotation and font size of the x-axis labels.
plt.show()  # Displays the plot.

train_data.info()  # Displays information about the train_data DataFrame, such as column names, data types, and non-null counts.
# Find any null value
train_data.isnull().sum()  # Computes the sum of null values in each column of the train_data DataFrame.

# Initialize the stemmer and stop words
stemmer = LancasterStemmer()  # Initializes the LancasterStemmer for stemming words.
stop_words = set(stopwords.words('english'))  # Initializes a set of English stopwords.

# Define the clean_text function
def clean_text(text):
    text = text.lower()  # Converts text to lowercase.
    text = re.sub(r'@\S+', '', text)  # Removes Twitter handles.
    text = re.sub(r'http\S+', '', text)  # Removes URLs.
    text = re.sub(r'pic.\S+', '', text)  # Removes image links.
    text = re.sub(r"[^a-zA-Z+']", ' ', text)  # Keeps only alphabetic characters and apostrophes.
    text = re.sub(r'\s+[a-zA-Z]\s+', ' ', text + ' ')  # Keeps words with length > 1 only.
    text = "".join([i for i in text if i not in string.punctuation])  # Removes punctuation.
    words = nltk.word_tokenize(text)  # Tokenizes the text into words.
    stopwords = nltk.corpus.stopwords.words('english')  # Initializes English stopwords.
    text = " ".join([i for i in words if i not in stopwords and len(i) > 2])  # Removes stopwords and short words.
    text = re.sub("\s[\s]+", " ", text).strip()  # Removes repeated/leading/trailing spaces.
    return text

# Apply the clean_text function to the 'Description' column in the training and test data
train_data['Text_cleaning'] = train_data['Description'].apply(clean_text)  # Applies the clean_text function to the 'Description' column in the training data.
test_data['Text_cleaning'] = test_data['Description'].apply(clean_text)  # Applies the clean_text function to the 'Description' column in the test data.

# Droping the redundant data
print("shape before drop nulls",train_data.shape)
train_data = train_data.drop_duplicates()
print("shape after drop nulls",train_data.shape)

# Calculate the length of cleaned text
train_data['length_Text_cleaning'] = train_data['Text_cleaning'].apply(len)
# Visualize the distribution of text lengths
plt.figure(figsize=(8, 7))
sns.histplot(data=train_data, x='length_Text_cleaning', bins=20, kde=True, color='blue')
plt.xlabel('Length', fontsize=14, fontweight='bold')
plt.ylabel('Frequency', fontsize=14, fontweight='bold')
plt.title('Distribution of Lengths', fontsize=16, fontweight='bold')
plt.show()

# Create histograms to visualize the distribution of text lengths before and after cleaning

# Set up the figure with two subplots
plt.figure(figsize=(12, 6))

# Subplot 1: Original text length distribution
plt.subplot(1, 2, 1)
original_lengths = train_data['Description'].apply(len)
plt.hist(original_lengths, bins=range(0, max(original_lengths) + 100, 100), color='blue', alpha=0.7)
plt.title('Original Text Length')
plt.xlabel('Text Length')
plt.ylabel('Frequency')

# Subplot 2: Cleaned text length distribution
plt.subplot(1, 2, 2)
cleaned_lengths = train_data['Text_cleaning'].apply(len)
plt.hist(cleaned_lengths, bins=range(0, max(cleaned_lengths) + 100, 100), color='green', alpha=0.7)
plt.title('Cleaned Text Length')
plt.xlabel('Text Length')
plt.ylabel('Frequency')

# Adjust layout and display the plots
plt.tight_layout()
plt.show()


# Initialize the TF-IDF vectorizer
tfidf_vectorizer = TfidfVectorizer()

# Fit and transform the training data
X_train = tfidf_vectorizer.fit_transform(train_data['Text_cleaning'])

# Transform the test data
X_test = tfidf_vectorizer.transform(test_data['Text_cleaning'])

# Split the data into training and validation sets
X = X_train
y = train_data['Genre']
X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train a Multinomial Naive Bayes classifier
classifier = MultinomialNB()
classifier.fit(X_train, y_train)

# Make predictions on the validation set
y_pred = classifier.predict(X_val)

# Evaluate the performance of the model
accuracy = accuracy_score(y_val, y_pred)
print("Validation Accuracy:", accuracy)
print(classification_report(y_val, y_pred))

# Use the trained model to make predictions on the test data
X_test_predictions = classifier.predict(X_test)
test_data['Predicted_Genre'] = X_test_predictions

# Save the test_data DataFrame with predicted genres to a CSV file
test_data.to_csv('predicted_genres.csv', index=False)

# Display the 'test_data' DataFrame with predicted genres
print(test_data)

